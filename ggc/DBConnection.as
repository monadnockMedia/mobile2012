package com.mobile.ggc {	import flash.data.*;	import flash.events.SQLErrorEvent;	import flash.events.SQLEvent;	import flash.filesystem.File;	import flash.events.EventDispatcher;	import com.mobile.ggc.DBConnectionEvent;	public class DBConnection extends EventDispatcher{				private var dbPath:String = "test.db";		private var q:SQLStatement;		private var conn:SQLConnection;		private var appDir:File;		private var dbFile:File;		private var _players:Object= {};				public var dbOpen:Boolean = false;				public function set filePath(_file:String) 		{			// constructor code			file = _file;		}				//to open file and setup db connection, specify path relative to application directory.		public function set file(s:String):void		{			dbPath = s;			setup();		}				public function set players(p:Object):void		{			for each (var o:Object in p)			{				_players[o.team] = o.id;			}		}				public function get isOpen():Boolean		{			return (conn) ? conn.connected : false;		}				public function setup():void		{			// define where to find the database file            appDir = File.applicationDirectory;            dbFile = appDir.resolvePath(dbPath);            // open the database connection            conn = new SQLConnection();		}		public function openConn() {			// open the dbConnection			conn.addEventListener(SQLErrorEvent.ERROR, errorHandler);            conn.addEventListener(SQLEvent.OPEN, openHandler);            conn.openAsync(dbFile);		}				private function openHandler(e:SQLEvent):void        {            conn.removeEventListener(SQLEvent.OPEN, openHandler);            dbOpen = true;            // let the world know that the DB is ready to be queried      		dispatchEvent(new DBConnectionEvent(DBConnectionEvent.DB_OPEN));        }				public function closeConn() {			// constructor code		}				public function pullCard(table:String,player:String,ID:Array) {						//get the deck id from player name			var deckId:Number = _players[player];			//build sql query			q = new SQLStatement();			with (q){				text= "SELECT * FROM "+table+" WHERE DeckId = "+deckId+" AND DeckIndex IN ("+ID.toString()+")";				sqlConnection = conn;           		addEventListener(SQLEvent.RESULT, resultHandler);          		addEventListener(SQLErrorEvent.ERROR, errorHandler);			}			//begin transaction with SQL db file			conn.addEventListener(SQLEvent.BEGIN, beginHandler);            conn.begin();			q.execute();		}						public function pullIssue(table:String,uId:Number) {						q = new SQLStatement();			with (q){				text= "SELECT * FROM "+table+" WHERE uId = "+uId;				sqlConnection = conn;           		addEventListener(SQLEvent.RESULT, resultHandler);          		addEventListener(SQLErrorEvent.ERROR, errorHandler);			}			//begin transaction with SQL db file			q.execute();			//conn.addEventListener(SQLEvent.BEGIN, beginHandler);            //conn.begin();		}				// Called when the transaction begins        private function beginHandler(event:SQLEvent):void        {            conn.removeEventListener(SQLEvent.BEGIN, beginHandler);			//execute query created above			//q.execute();        }		private function resultHandler(event:SQLEvent):void        {            q.removeEventListener(SQLEvent.RESULT, resultHandler);            q.removeEventListener(SQLErrorEvent.ERROR, errorHandler);                        // Get the employee id of the newly created employee row            var result:SQLResult = q.getResult();			dispatchEvent(new DBConnectionEvent(DBConnectionEvent.DB_RETURN, false, false, result.data));			/*trace("Result Recieved");			for each (var obj:Object in result.data){				for each (var st:String in obj){					trace("DB OBJECT::"+st);				}			}*/			        }				 private function errorHandler(event:SQLErrorEvent):void        {            // If a transaction is happening, roll it back            if (conn.inTransaction)            {                conn.addEventListener(SQLEvent.ROLLBACK, rollbackHandler);                conn.rollback();            }                        trace(event.error.message);            trace(event.error.details);        }				// Called when the transaction is rolled back        private function rollbackHandler(event:SQLEvent):void        {            conn.removeEventListener(SQLEvent.ROLLBACK, rollbackHandler);                        // add additional error handling, close the database, etc.        }		public function dispose():void		{			conn = null;			appDir = null;			dbFile = null;		}	}	}