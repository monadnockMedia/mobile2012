package com.mobile.ggc {		import flash.system.System;		import flash.events.EventDispatcher;	public class basePlayer extends EventDispatcher {		private var theDealer:ggDealer;		public var id:Number;		public var team:String;		private var myTurn:Boolean=false;		private var currentView:Object = {};		public function basePlayer(config:Object) {			// constructor code			id = config.id;			team =config.team;					}						public function get view():* //Returns the current view to be called by gui objects		{			return (currentView == null) ? false : currentView;		}				public function set dealer(d:ggDealer):void  //sets a reference to the dealer		{			theDealer = d;			theDealer.addEventListener(DealerEvent.ISSUE_DEALT, issueHandler);			theDealer.addEventListener(DealerEvent.SCORING, scoreHandler);		}				public function set active(b:Boolean):void //this is true when it is this players "turn"		{			myTurn = b;			(b) ? beginTurn(): endTurn();					}				public function get active():Boolean  //Is it this players turn?		{			return myTurn;		}				private function beginTurn():void //When active is set		{			theDealer.addEventListener(DealerEvent.CARDS_DEALT, cardsHandler); //wait to be dealt cards			dispatchEvent(new PlayerEvent(PlayerEvent.HIT_ME, true, false, team));  //ask for cards from dealer		}				private function endTurn():void		{			theDealer.removeEventListener(DealerEvent.CARDS_DEALT, cardsHandler); 			currentView = null;			dispatchEvent(new PlayerEvent(PlayerEvent.VIEW_CHANGED, true)); //change gui view to null view		}				public function cardsHandler(e:DealerEvent):void  //When cards are dealt		{			currentView = e.data;			dispatchEvent(new PlayerEvent(PlayerEvent.VIEW_CHANGED, false, false, currentView));		}		public function issueHandler(e:DealerEvent):void  //override this function for issue group decision.		{			currentView = e.data[team];			dispatchEvent(new PlayerEvent(PlayerEvent.VIEW_CHANGED, false, false, currentView));		}		//peraps move out of base class		private function scoreHandler(d:DealerEvent):void		{			if(team != "Populace"){				var round = d.data[team].round;		  		currentView = {};				currentView.cardType = "score";				currentView.change = round.change;				currentView.proposer = round.proposer;				dispatchEvent(new PlayerEvent(PlayerEvent.VIEW_CHANGED, false, false, currentView));			}		}				public function submitVote(v:Boolean):void //Player has voted on an issue		{			var vote:Object = {}			vote.team = team;			vote.v = v;			vote.points = currentView.points;			dispatchEvent(new PlayerEvent(PlayerEvent.VOTE, true, false, vote ));		}				//player has chosen between two cards. arg is hand id		public function submitDecision(id:Number):void 		{			dispatchEvent(new PlayerEvent(PlayerEvent.DECISION, true, false, id ));		}						public function cleanup():void		{			theDealer.removeEventListener(DealerEvent.ISSUE_DEALT, issueHandler);		}				public function toObject():Object{			return new Object();					}	}	}